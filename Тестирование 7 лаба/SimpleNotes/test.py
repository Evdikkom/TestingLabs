from appium import webdriver
from appium.webdriver.common.appiumby import AppiumBy
import time
import unittest
import subprocess
import requests

class TestNotesAppV1(unittest.TestCase):
    """
    –¢–µ—Å—Ç—ã –¥–ª—è Appium 1.22.3
    """
    
    def setUp(self):
        print(f"üé¨ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç—É: {self._testMethodName}")
        
        # Desired Capabilities –¥–ª—è Appium 1.x
        desired_caps = {
            'platformName': 'Android',
            'platformVersion': '11.0',  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –≤–µ—Ä—Å–∏—é Android
            'deviceName': 'emulator-5554',
            'appPackage': 'com.example.simplenotes',
            'appActivity': '.MainActivity',
            'automationName': 'UiAutomator2',
            'noReset': True,
            'newCommandTimeout': 60
        }
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Appium 1.x
            self.driver = webdriver.Remote('http://127.0.0.1:4723/wd/hub', desired_caps)
            self.driver.implicitly_wait(10)
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Appium 1.22.3!")
        except Exception as e:
            self.fail(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")
    
    def test_01_simple_button_tap(self):
        """–ü–†–û–°–¢–û–ô –¢–ï–°–¢: –¢–∞–ø –ø–æ –∫–Ω–æ–ø–∫–µ"""
        print("üëÜ –¢–ï–°–¢: –¢–∞–ø –ø–æ –∫–Ω–æ–ø–∫–µ")
        
        try:
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            time.sleep(5)
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –î–û
            self.driver.save_screenshot("before_test.png")
            print("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –î–û: before_test.png")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏
            button_selectors = [
                "//android.widget.Button[@text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É']",
                "//*[@text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É']",
                "//*[contains(@text, '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')]",
                "//android.widget.Button"
            ]
            
            save_button = None
            for selector in button_selectors:
                try:
                    elements = self.driver.find_elements(AppiumBy.XPATH, selector)
                    if elements:
                        save_button = elements[0]
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                        break
                except:
                    continue
            
            if save_button:
                # –¢–ê–ü –ü–û –ö–ù–û–ü–ö–ï!
                save_button.click()
                print("üéâ –£–°–ü–ï–•: –¢–ê–ü –ü–û –ö–ù–û–ü–ö–ï –í–´–ü–û–õ–ù–ï–ù!")
                
                # –°–∫—Ä–∏–Ω—à–æ—Ç –ü–û–°–õ–ï
                time.sleep(2)
                self.driver.save_screenshot("after_test.png")
                print("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ü–û–°–õ–ï: after_test.png")
            else:
                # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º —Ç–∞–ø –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                print("‚ö† –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–µ–ª–∞–µ–º —Ç–∞–ø –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º")
                self.driver.tap([(500, 500)], 100)
                print("üéâ –¢–ê–ü –í–´–ü–û–õ–ù–ï–ù –ü–û –ö–û–û–†–î–ò–ù–ê–¢–ê–ú!")
                
        except Exception as e:
            self.fail(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def test_02_app_elements(self):
        """–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        time.sleep(3)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        page_source = self.driver.page_source
        with open("page_layout.xml", "w", encoding="utf-8") as f:
            f.write(page_source)
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ page_layout.xml")
        
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        elements_to_find = [
            "–ó–∞–º–µ—Ç–∫–∏",
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏",
            "–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏",
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"
        ]
        
        found_elements = []
        for element_text in elements_to_find:
            try:
                elements = self.driver.find_elements(AppiumBy.XPATH, f"//*[contains(@text, '{element_text}')]")
                if elements:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {element_text}")
                    found_elements.append(element_text)
                else:
                    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {element_text}")
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ {element_text}: {e}")
        
        print(f"üìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(found_elements)}/{len(elements_to_find)}")
        
    def tearDown(self):
        if hasattr(self, 'driver'):
            try:
                self.driver.quit()
            except:
                pass
        print(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {self._testMethodName}\n")

def check_appium_v1():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Appium 1.x"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø –î–õ–Ø APPIUM 1.22.3")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Appium
    try:
        result = subprocess.run(["npx", "appium", "--version"], capture_output=True, text=True, timeout=5)
        print(f"‚úÖ Appium –≤–µ—Ä—Å–∏—è: {result.stdout.strip()}")
    except:
        print("‚ùå Appium –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º—É–ª—è—Ç–æ—Ä
    try:
        result = subprocess.run(["adb", "devices"], capture_output=True, text=True, timeout=5)
        if "device" in result.stdout:
            print("‚úÖ –≠–º—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")
            # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            for line in result.stdout.strip().split('\n'):
                if 'device' in line and 'List' not in line:
                    print(f"   üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {line}")
        else:
            print("‚ùå –≠–º—É–ª—è—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ADB: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Appium Server
    try:
        response = requests.get('http://127.0.0.1:4723/wd/hub/status', timeout=5)
        if response.status_code == 200:
            print("‚úÖ Appium Server –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå Appium Server –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫–æ–¥: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Appium Server: {e}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Appium –∑–∞–ø—É—â–µ–Ω: npx appium")
        return False

if __name__ == '__main__':
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –î–õ–Ø APPIUM 1.22.3")
    print("=" * 60)
    
    if check_appium_v1():
        print("\nüéØ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í...")
        unittest.main(verbosity=2)
    else:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤")